# this is a test configuration

# global filter; messages must have at least this severity to pass:
minSeverity: Info

# global file rotation settings:
rotation:
  rpLogLimitBytes: 5000000
  rpKeepFilesNum:  10
  rpMaxAgeHours:   24

# these backends are initialized:
setupBackends:
  - AggregationBK
  - EKGViewBK
  - KatipBK

# if not indicated otherwise, then messages are passed to these backends:
defaultBackends:
  - KatipBK

# if wanted, the GUI is listening on this port:
# hasGUI: 18321

# if wanted, the EKG interface is listening on this port:
hasEKG: 12789

# if wanted, we send log items to Graylog on this port:
hasGraylog: 12788

# if wanted, the Prometheus interface is using this port:
# hasPrometheus: 12799

# here we set up outputs of logging in 'katip':
setupScribes:
  - scKind: StdoutSK
    scFormat: ScText
    scName: stdout
  - scKind: FileSK
    scFormat: ScText
    scName: "testlog"
    scPrivacy: ScPrivate
    scRotation:
      rpLogLimitBytes: 25000000
      rpKeepFilesNum:  3
      rpMaxAgeHours:   24

# if not indicated otherwise, then log output is directed to this:
defaultScribes:
  - - StdoutSK
    - stdout

# more options which can be passed as key-value pairs:
options:
  cfokey:
    value: "Release-1.0.0"
  mapMonitors: !
    '#aggregation.critproc.observable':
        monitor: (mean >= (42))
        actions:
          - CreateMessage Warning "the observable has been too long too high!"
          - SetGlobalMinimalSeverity Info
    chain.creation.block:
        monitor: ((time > (23 s)) Or (time < (17 s)))
        actions:
          - CreateMessage Warning "chain.creation"
          - AlterSeverity "chain.creation" Debug
  mapSeverity:
    iohk.startup: Debug
    iohk.background.process: Error
    iohk.testing.uncritical: Warning
  mapSubtrace:
    iohk.benchmarking:
      subtrace: ObservableTraceSelf
      contents:
        - GhcRtsStats
        - MonotonicClock
    iohk.deadend:
      subtrace: NoTrace
  mapBackends:
    iohk.interesting.value:
      - EKGViewBK
      - AggregationBK
    iohk.user.defined:
      - kind: UserDefinedBK
        name: MyBackend
      - KatipBK
  mapScribes:
    iohk.interesting.value:
      - "StdoutSK::stdout"
      - "FileSK::testlog"
    iohk.background.process:
        "FileSK::testlog"
  mapAggregatedkinds:
    iohk.interesting.value:
        "EwmaAK {alpha = 0.75}"
    iohk.background.process:
        "StatsAK"

traceForwardTo:
  tag: RemotePipe
  contents: to

traceAcceptAt:
  tag: RemotePipe
  contents: at
